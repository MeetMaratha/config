import os
os.system(pamixer --get-volume-human)
os.system('pamixer --get-volume-human')
print(os.system('pamixer --get-volume-human'))
print(os.system('pamixer --get-volume-human')[0])
print(os.system('pamixer --get-volume-human'))
output = os.system('pamixer --get-volume-human')
output
import subprocess
subprocess.checkoutput('pamixer --get-volume-human')
subprocess.check_output('pamixer --get-volume-human')
quit()
os.path.expanduser()
os.expanduser('~/.config/autostart.sh')
os.path.expanduser('~/.config/autostart.sh')
quit()
import os
os.walk('/home/meet/Pictures/Wallpaper')
next(os.walk('/home/meet/Pictures/Wallpaper'))
quit()
import nltk
nltk.download()
d
d)
d
l
d
all
c
exit
m
q
python -m nltk.download('all')
exit
python -m nltk.downloader all
exit()
from nltk.translate import bleu
bleu(['The candidate has no alignment to any of the refrences'.split()], 'John loves Mary'.split(), (1, ),)
sentence_bleu(['It is a place of quiet contemplation'.split()], 'It is .'.split(), smoothing_function=SmoothingFunction().method4,)*100
from nltk.translate.bleu_score import ssentence_bleu, SmoothingFunction
from nltk.translate.bleu_score import sentence_bleu, SmoothingFunction
sentence_bleu(['It is a place of quiet contemplation'.split()], 'It is .'.split(), smoothing_function=SmoothingFunction().method4,)*100
quit()
import turtle 
tr = turtle.Turtle()
tr.color("black")
tr.begin_fill()
tr.circle(130,180)
tr.end_fill()
tr.hideturtle()
quit()
import numpy
a = numpy.random.rand(301)
len(a)
a = numpy.random.rand(300)
len(a)
quit()
exit()
from osgeo import gdal
import gdal
exit()
from osgeo import gdal
import gdal
exit
exit()
import gdal
exit()
from osgeo import gdal
exit()
import gdal
from osgeo import gdal
quit()
from osgeo import gdal
exit()
from osgeo import gdal
ys.getenv("LD_LIBRARY_PATH")
Sys.getenv("LD_LIBRARY_PATH")
import sys
sys.getenv("LD_LIBRARY_PATH")
sys.path
import os, sys
if 'LD_LIBRARY_PATH' not in os.environ:
    os.environ['LD_LIBRARY_PATH'] = '/usr/lib/oracle/XX.Y/client64/lib'
    os.environ['ORACLE_HOME'] = '/usr/lib/oracle/XX.Y/client64'
    try:
        os.execv(sys.argv[0], sys.argv)
    except Exception, exc:
        print 'Failed re-exec:', exc
        sys.exit(1)
#
# import yourmodule
print 'Success:', os.environ['LD_LIBRARY_PATH']
import os, sys
if 'LD_LIBRARY_PATH' not in os.environ:
	os.environ['LD_LIBRARY_PATH'] = '/usr/lib/oracle/XX.Y/client64/lib'
	os.environ['ORACLE_HOME'] = '/usr/lib/oracle/XX.Y/client64'
try:
        os.execv(sys.argv[0], sys.argv)
    except Exception, exc:
        print 'Failed re-exec:', exc
if 'LD_LIBRARY_PATH' not in os.environ:
	os.environ['LD_LIBRARY_PATH'] = '/usr/lib/oracle/XX.Y/client64/lib'
	os.environ['ORACLE_HOME'] = '/usr/lib/oracle/XX.Y/client64'
	try:
        os.execv(sys.argv[0], sys.argv)
if 'LD_LIBRARY_PATH' not in os.environ:
	os.environ['LD_LIBRARY_PATH'] = '/usr/lib/oracle/XX.Y/client64/lib'
	os.environ['ORACLE_HOME'] = '/usr/lib/oracle/XX.Y/client64'
	try:
    	os.execv(sys.argv[0], sys.argv)
    os.execv(sys.argv[0], sys.argv)
quit()
from osgeo import gdal
quit()
from osgeo import gdal
quit()
from controller import Robot
exit()
from controller import Robot
exit()
from webots import controller
from controller import Robot
exit()
import sys
sys.version_info[0]
sys.version_info[1]
exit()
import controller
from webots import controller
exit()
from controller import Robot
from webots import controller
from controller import Robot
exit()
import skimage
quit()
import pickle
le = pickle.load('./Models/LabelEncoder.pickle')
with open('./Models/LabelEncoder.pickle', 'rb') as f:
	le = pickle.load(f)
le.classes_
quit()
import itertools
import threading
import time
import sys
done = False
#here is the animation
def animate():
    for c in itertools.cycle(['|', '/', '-', '\\']):
        if done:
            break
        sys.stdout.write('\rloading ' + c)
        sys.stdout.flush()
        time.sleep(0.1)
    sys.stdout.write('\rDone!     ')
t = threading.Thread(target=animate)
t.start()
#long process here
time.sleep(10)
done = True
quit()
from itertools import cycle
from shutil import get_terminal_size
from threading import Thread
from time import sleep
class Loader:
    def __init__(self, desc="Loading...", end="Done!", timeout=0.1):
        """
        A loader-like context manager
        Args:
            desc (str, optional): The loader's description. Defaults to "Loading...".
            end (str, optional): Final print. Defaults to "Done!".
            timeout (float, optional): Sleep time between prints. Defaults to 0.1.
        """
        self.desc = desc
        self.end = end
        self.timeout = timeout
        self._thread = Thread(target=self._animate, daemon=True)
        self.steps = ["⢿", "⣻", "⣽", "⣾", "⣷", "⣯", "⣟", "⡿"]
        self.done = False
    def start(self):
        self._thread.start()
        return self
    def _animate(self):
        for c in cycle(self.steps):
            if self.done:
                break
            print(f"\r{self.desc} {c}", flush=True, end="")
            sleep(self.timeout)
    def __enter__(self):
        self.start()
    def stop(self):
        self.done = True
        cols = get_terminal_size((80, 20)).columns
        print("\r" + " " * cols, end="", flush=True)
        print(f"\r{self.end}", flush=True)
    def __exit__(self, exc_type, exc_value, tb):
        # handle exceptions with those variables ^
        self.stop()
if __name__ == "__main__":
    with Loader("Loading with context manager..."):
        for i in range(10):
            sleep(0.25)
    loader = Loader("Loading with object...", "That was fast!", 0.05).start()
    for i in range(10):
        sleep(0.25)
quit()
import gensim
gensim.downloader.BASE_DIR
print(gensim.downloader.BASE_DIR)exit
exit()
import gensim.downloader
gensim.downloader.BASE_DIR
exit()
import os
os.listdir()
exit()
import os
os.getcwd()
os.listdir()
os.listdir('Data/Preprocessed/Unigram')
os.makedirs('Data/Preprocessed/Unigram/Count Vectorizer')
os.listdir('Data/Preprocessed/Unigram')
os.path.join('Data', 'Unigram' if choice == 1 else 'Bigram')
choice = 0
os.path.join('Data', 'Unigram' if choice == 1 else 'Bigram')
choice = 1
os.path.join('Data', 'Unigram' if choice == 1 else 'Bigram')
exit()
